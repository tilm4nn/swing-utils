<?xml version="1.0"?>


<project name="SwingUtils" default="all" basedir=".">

   

<!-- ===================== Property Definitions =========================== -->

<!--

  Each of the following properties are used in the build script.
  Values for these properties are set by the first place they are
  defined, from the following list:
  * Definitions on the "ant" command line (ant -Dcatalina.home=xyz compile)
  * Definitions from a "build.properties" file in the top level
    source directory
  * Definitions from a "build.properties" file in the developer's
    home directory
  * Default definitions in this build.xml file

  You will note below that property values can be composed based on the
  contents of previously defined properties.  This is a powerful technique
  that helps you minimize the number of changes required when your development
  environment is modified.  Note that property composition is allowed within
  "build.properties" files as well as in the "build.xml" script.

-->

  <property file="build.properties"/>
  <property file="${user.home}/build.properties"/>

<!-- ==================== File and Directory Names ======================== -->

<!--

  These properties generally define file and directory names (or paths) that
  affect where the build process stores its outputs.

  app.name             Base name of this application, used to
                       construct filenames and directories.

  app.version          Version identifier for this application.
  
  app.author           Author name of the application

  build.home           The directory into which the "prepare" and
                       "compile" targets will generate their output.
                       Defaults to "build".

  dist.home            The name of the base directory in which binary
                       distribution files are created.
                       Defaults to "dist".
                       
  src.dist.home        The name of the base directory in which
                       source-distribution files are created.
                       Defaults to "src_dist".
                       
  complete.dist.home   The name of the base directory in which
                       distribution files are created.
                       Defaults to "complete_dist".
                       
  jar.home             The name of the base directory in which
                       jar-distribution files are created.
                       Defaults to ".".
                       
  zip.home             The name of the base directory in which
                       application zip-files are created.
                       Defaults to ".".
                       
  docs.home            The name of the base directory where
                       application-documentation is located.
                       Api-docs will also be generated there.
                       
  test.src.home        The name of the base directory in which your unit-testing
                       classes are located.
                       
  test.build.home      The name of the directory in whisch your unit-testing
                       classes will be compiled.
                       
  lib.home             The name of the base directory where jar-files are
                       located to be included in the classpath.

-->

  <property name="app.name"        value="SwingUtils"/>
  <property name="app.version"     value="0.9.4"/>
  <property name="app.author"      value="Tilmann Kuhn"/>
  <property name="app.dist.name"   value="${app.name}-${app.version}"/>
  
  <property name="src.home"        value="src"/>
  <property name="test.src.home"   value="test_src"/>
  
  <property name="build.home"      value="build"/>
  <property name="test.build.home" value="test_build"/>
  
  <property name="dist.home"       value="dist"/>
  <property name="src.dist.home"   value="src_dist"/>
  <property name="complete.dist.home"   value="complete_dist"/>
  
  <property name="docs.home"       value="docs"/>
  <property name="lib.home"        value="lib"/>
  <property name="jar.home"        value="."/>
  <property name="zip.home"        value="."/>

<!-- ==================== External Dependencies =========================== -->


<!--

  Use property values to define the locations of external JAR files on which
  your application will depend. 

-->

<!--
  <property name="junit.jar"       value="lib/junit.jar"/>
-->

  
<!--  ==================== Compilation Control Options ==================== -->

<!--

  These properties control option settings on the Javac compiler when it
  is invoked using the <javac> task.

  compile.debug        Should compilation include the debug option?

  compile.deprecation  Should compilation include the deprecation option?

  compile.optimize     Should compilation include the optimize option?

-->

  <property name="compile.debug"       value="true"/>
  <property name="compile.deprecation" value="false"/>
  <property name="compile.optimize"    value="true"/> 
  <property name="compile.source"      value="5"/> 
  <property name="compile.target"      value="5"/>   

  
    
<!-- ==================== Compilation Classpath =========================== -->

  <path id="javadoc.source.path">
    <pathelement location="${src.home}"/>
  </path>


  <path id="compile.classpath">
    <!--<pathelement location="${src.home}"/>-->
    <!--<pathelement path="${netbeans.filesystems.path}"/>-->
    <fileset dir="${lib.home}" includes="**/*.jar"/>
  </path>
  
  <path id="test.compile.classpath">
    <pathelement location="${build.home}"/>
    <fileset dir="${lib.home}" includes="**/*.jar"/>
    <pathelement location="${junit.jar}"/>
  </path>

  
<!-- ==================== All Target ====================================== -->

<!--

  The "all" target is a shortcut for running the "clean" target followed
  by the "compile" target, to force a complete recompile.

-->

  <target name="all" depends="clean,compile" description="Clean and build"/>  
  
<!-- ==================== Clean Target ==================================== -->

<!--

  The "clean" target deletes any previous "build" and "dist" directory,
  so that you can be ensured the application can be built from scratch.

-->

  <target name="clean" description="Delete old build and dist directories">
    <delete dir="${build.home}"/>
    <delete dir="${test.build.home}"/>
    <delete dir="${dist.home}"/>
    <delete dir="${src.dist.home}"/>
    <delete dir="${complete.dist.home}"/>
  </target>

    
  
<!-- ==================== Compile Target ================================== -->

<!--

  The "compile" target transforms source files (from your "src" directory)
  into object files in the appropriate location in the build directory.
  This example assumes that you will be including your classes in an
  unpacked directory hierarchy under "/WEB-INF/classes".

-->

  <target name="compile" depends="compile.src,compile.test" description="Compile everything">

  </target>

    
  <target name="compile.test" depends="compile.src" description="Compile testclasses">
    <mkdir  dir="${test.build.home}"/>
    <!-- Compile Java classes as necessary -->
    <javac      srcdir="${test.src.home}"
               destdir="${test.build.home}"
                 debug="${compile.debug}"
           deprecation="${compile.deprecation}"
              optimize="${compile.optimize}"
                source="${compile.source}"
                target="${compile.target}"
     includeantruntime="false">
              
      <classpath refid="test.compile.classpath"/>
    </javac>
  </target>

    
  <target name="compile.src" depends="prepare" description="Compile java sources">
    <mkdir  dir="${build.home}"/>
    <!-- Compile Java classes as necessary -->
    <javac      srcdir="${src.home}"
               destdir="${build.home}"
                 debug="${compile.debug}"
           deprecation="${compile.deprecation}"
              optimize="${compile.optimize}"
                source="${compile.source}"
                target="${compile.target}"
     includeantruntime="false">
              
      <classpath refid="compile.classpath"/>
    </javac>
  </target>
  

  
<!-- ==================== Jar Targets ===================================== -->

  
  <target name="jar" depends="compile.src" description="Create jar file">
    <mkdir  dir="${jar.home}"/>
    <jar jarfile="${jar.home}/${app.name}.jar"
         basedir="${build.home}"/>
  
  </target>

<!-- ==================== Dist Targets ==================================== -->
  
  <target name="dist" depends="jar,javadoc" description="Create binary distribution">

  	<delete dir="${dist.home}" />
    <mkdir  dir="${dist.home}/${app.dist.name}"/>
    
    <!-- Copy documentation subdirectory -->
    <copy todir="${dist.home}/${app.dist.name}/${docs.home}">
      <fileset dir="${docs.home}" excludes="**/.*"/>
    </copy>

    <copy todir="${dist.home}/${app.dist.name}">
      <fileset dir="${jar.home}" includes="${app.name}.jar"/>
    </copy>
  	
    <copy todir="${dist.home}/${app.dist.name}/${lib.home}">
      <fileset dir="${lib.home}"/>
    </copy>
    
  	<delete file="${zip.home}/${app.dist.name}.zip" />
    <mkdir  dir="${zip.home}"/>
    <zip zipfile="${zip.home}/${app.dist.name}.zip"
         basedir="${dist.home}"/>

  </target>
 
   
  <target name="dist.src" depends="compile" description="Create source distribution">

  	<delete dir="${src.dist.home}" />
    <mkdir dir="${src.dist.home}/${app.dist.name}"/>
    
    <copy todir="${src.dist.home}/${app.dist.name}/${docs.home}">
      <fileset dir="${docs.home}" excludes="api/**/*,**/.*"/>
    </copy>
    
    <copy todir="${src.dist.home}/${app.dist.name}/${src.home}">
      <fileset dir="${src.home}" includes="**/*.java,**/*.html,**/*.form"/>
    </copy>
    
    <copy todir="${src.dist.home}/${app.dist.name}/${test.src.home}">
      <fileset dir="${test.src.home}" includes="**/*.java,**/*.html,**/*.form"/>
    </copy>
    
    <copy todir="${src.dist.home}/${app.dist.name}">
      <fileset dir="." includes="build.xml,README.txt,LICENSE.txt,.project,.classpath"/>
    </copy>
    
    <copy todir="${src.dist.home}/${app.dist.name}/${lib.home}">
      <fileset dir="${lib.home}"/>
    </copy>
  	
  	<delete file="${zip.home}/${app.dist.name}-src.zip" />
    <mkdir  dir="${zip.home}"/>
    <zip zipfile="${zip.home}/${app.dist.name}-src.zip"
         basedir="${src.dist.home}"/>
         

  </target>
  
  <target name="dist.complete" depends="jar,javadoc" description="Create distribution including doc, binary and sources.">

  	<delete dir="${complete.dist.home}" />
    <mkdir  dir="${complete.dist.home}/${app.dist.name}"/>
    
    <!-- Copy documentation subdirectory -->
    <copy todir="${complete.dist.home}/${app.dist.name}/${docs.home}">
      <fileset dir="${docs.home}" excludes="**/.*"/>
    </copy>

    <copy todir="${complete.dist.home}/${app.dist.name}">
      <fileset dir="${jar.home}" includes="${app.name}.jar"/>
    </copy>
    
    <copy todir="${complete.dist.home}/${app.dist.name}/${src.home}">
      <fileset dir="${src.home}" includes="**/*.java,**/*.html,**/*.form"/>
    </copy>
    
    <copy todir="${complete.dist.home}/${app.dist.name}/${test.src.home}">
      <fileset dir="${test.src.home}" includes="**/*.java,**/*.html,**/*.form"/>
    </copy>
    
    <mkdir dir="${complete.dist.home}/${app.dist.name}/${lib.home}"/>
    
    <copy todir="${complete.dist.home}/${app.dist.name}">
      <fileset dir="." includes="build.xml,README.txt,LICENSE.txt,.project,.classpath"/>
    </copy>
  	
    <copy todir="${complete.dist.home}/${app.dist.name}/${lib.home}">
      <fileset dir="${lib.home}"/>
    </copy>
     
  	<delete file="${zip.home}/${app.dist.name}.zip" />
  	<mkdir  dir="${zip.home}"/>
    <zip zipfile="${zip.home}/${app.dist.name}.zip"
         basedir="${complete.dist.home}"/>

  </target>
  
<!-- ==================== Javadoc Target ================================== -->

<!--

  The "javadoc" target creates Javadoc API documentation for the Java
  classes included in your application.  Normally, this is only required
  when preparing a distribution release, but is available as a separate
  target in case the developer wants to create Javadocs independently.

-->

  <target name="javadoc" description="Create Javadoc API documentation">
    <delete dir="${docs.home}/api"/>
    <mkdir dir="${docs.home}/api"/> 
    <javadoc sourcepathref="javadoc.source.path"
             destdir="${docs.home}/api"
             packagenames="*.*"
             author="true"
             windowtitle="${app.name} ${app.version} API Documentation"
             doctitle="${app.name} ${app.version} API Documentation"
             bottom="Copyright &#169; ${app.author}">
      <classpath refid="compile.classpath"/>
    </javadoc>

  </target>
  
<!-- ==================== Prepare Target ================================== -->

<!--

  The "prepare" target is used to create the "build" destination directory,
  and copy the static contents of your web application to it.  If you need
  to copy static files from external dependencies, you can customize the
  contents of this task.

  Normally, this task is executed indirectly when needed.

-->

  <target name="prepare" description="Prepare tasks">
     <mkdir  dir="${lib.home}"/>
     <mkdir  dir="${docs.home}"/>
  </target>
  
</project>
